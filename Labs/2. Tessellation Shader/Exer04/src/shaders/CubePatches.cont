// #version 400

// // layout(vertices = 4) out;  // output patch verticies

// void main()
// {
// 	gl_out[gl_InvocationID].gl_Position
// 		= gl_in[gl_InvocationID].gl_Position;
// 	gl_TessLevelOuter[0] = 2;
// 	gl_TessLevelOuter[1] = 2;
// 	gl_TessLevelOuter[2] = 2;
// 	gl_TessLevelOuter[3] = 2;
// 	gl_TessLevelInner[0] = 2;
// 	gl_TessLevelInner[1] = 2;
// }


// Bi-quadratic Bezier Surfaces
#version 400

layout(vertices = 9) out;

// gl_InvocationID (get the ID of each gl_in & gl_out vertex being rendered)
void main()
{
    gl_out[gl_InvocationID].gl_Position
     = gl_in[gl_InvocationID].gl_Position;

	// Mapping Vertex's gl_out to gl_in 
    if(gl_InvocationID == 0)    gl_out[gl_InvocationID].gl_Position = gl_in[0].gl_Position; 
    if(gl_InvocationID == 2)    gl_out[gl_InvocationID].gl_Position = gl_in[1].gl_Position; 
    if(gl_InvocationID == 6)    gl_out[gl_InvocationID].gl_Position = gl_in[3].gl_Position; 
    if(gl_InvocationID == 8)    gl_out[gl_InvocationID].gl_Position = gl_in[2].gl_Position; 

	// Midpoint on the edges patches
    if(gl_InvocationID == 5)    gl_out[gl_InvocationID].gl_Position = 
		vec4((gl_in[1].gl_Position.xyz+gl_in[2].gl_Position.xyz)*0.7, 1) ; 
    if(gl_InvocationID == 3)    gl_out[gl_InvocationID].gl_Position = 
		vec4((gl_in[0].gl_Position.xyz+gl_in[3].gl_Position.xyz)*0.7, 1) ;                                             
    if(gl_InvocationID == 1)    gl_out[gl_InvocationID].gl_Position = 
		vec4((gl_in[0].gl_Position.xyz+gl_in[1].gl_Position.xyz)*0.7, 1);
    if(gl_InvocationID == 7)   	gl_out[gl_InvocationID].gl_Position = 
	vec4((gl_in[3].gl_Position.xyz+gl_in[2].gl_Position.xyz)*0.7, 1) ; 
    
	// Midpoint patch
    if(gl_InvocationID == 4)  
        gl_out[gl_InvocationID].gl_Position = vec4( (gl_in[3].gl_Position.xyz        
                                              + gl_in[1].gl_Position.xyz         
                                              + gl_in[2].gl_Position.xyz         
                                              + gl_in[0].gl_Position.xyz)
                                              *0.5,  1 );

	// Setting Tessalation Levels
    gl_TessLevelOuter[0] = 8;
    gl_TessLevelOuter[1] = 8;
    gl_TessLevelOuter[2] = 8;
    gl_TessLevelOuter[3] = 8;
    gl_TessLevelInner[0] = 8;
    gl_TessLevelInner[1] = 8;
}